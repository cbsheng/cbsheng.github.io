<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>无远弗届</title>
    <link>http://cbsheng.github.io/</link>
    <description>Recent content on 无远弗届</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <copyright>&amp;copy; Copyright 2017-2018 cbsheng</copyright>
    <lastBuildDate>Fri, 07 Jun 2019 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="http://cbsheng.github.io/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>golang标准库sync.Pool原理及源码简析</title>
      <link>http://cbsheng.github.io/posts/golang%E6%A0%87%E5%87%86%E5%BA%93sync.pool%E5%8E%9F%E7%90%86%E5%8F%8A%E6%BA%90%E7%A0%81%E7%AE%80%E6%9E%90/</link>
      <pubDate>Fri, 07 Jun 2019 00:00:00 +0000</pubDate>
      
      <guid>http://cbsheng.github.io/posts/golang%E6%A0%87%E5%87%86%E5%BA%93sync.pool%E5%8E%9F%E7%90%86%E5%8F%8A%E6%BA%90%E7%A0%81%E7%AE%80%E6%9E%90/</guid>
      <description>&lt;h3 id=&#34;pool关键作用&#34;&gt;pool关键作用:&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt;减轻GC的压力。&lt;/li&gt;
&lt;li&gt;复用对象内存。有时不一定希望复用内存，单纯是想减轻GC压力也可主动给pool塞对象。&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>go的channel源码层理解</title>
      <link>http://cbsheng.github.io/posts/go%E7%9A%84channel%E6%BA%90%E7%A0%81%E5%B1%82%E7%90%86%E8%A7%A3/</link>
      <pubDate>Sun, 02 Jun 2019 00:00:00 +0000</pubDate>
      
      <guid>http://cbsheng.github.io/posts/go%E7%9A%84channel%E6%BA%90%E7%A0%81%E5%B1%82%E7%90%86%E8%A7%A3/</guid>
      <description>&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>简单结合Mysql索引、隔离性和锁的理解</title>
      <link>http://cbsheng.github.io/posts/%E7%AE%80%E5%8D%95%E7%BB%93%E5%90%88mysql%E7%B4%A2%E5%BC%95%E9%9A%94%E7%A6%BB%E6%80%A7%E5%92%8C%E9%94%81%E7%90%86%E8%A7%A3/</link>
      <pubDate>Sat, 01 Jun 2019 00:00:00 +0000</pubDate>
      
      <guid>http://cbsheng.github.io/posts/%E7%AE%80%E5%8D%95%E7%BB%93%E5%90%88mysql%E7%B4%A2%E5%BC%95%E9%9A%94%E7%A6%BB%E6%80%A7%E5%92%8C%E9%94%81%E7%90%86%E8%A7%A3/</guid>
      <description>&lt;p&gt;大概以实现重复读级别的隔离性，将索引和锁串起来理解一下。&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Redis(5.0.3)内存淘汰LRU/LFU</title>
      <link>http://cbsheng.github.io/posts/redis%E5%86%85%E5%AD%98%E6%B7%98%E6%B1%B0lru%E5%92%8Clfu/</link>
      <pubDate>Mon, 20 May 2019 00:00:00 +0000</pubDate>
      
      <guid>http://cbsheng.github.io/posts/redis%E5%86%85%E5%AD%98%E6%B7%98%E6%B1%B0lru%E5%92%8Clfu/</guid>
      <description>&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Redis(5.0.3)事件驱动与连接管理</title>
      <link>http://cbsheng.github.io/posts/redis%E4%BA%8B%E4%BB%B6%E9%A9%B1%E5%8A%A8%E4%B8%8E%E8%BF%9E%E6%8E%A5%E7%AE%A1%E7%90%86/</link>
      <pubDate>Sun, 31 Mar 2019 00:00:00 +0000</pubDate>
      
      <guid>http://cbsheng.github.io/posts/redis%E4%BA%8B%E4%BB%B6%E9%A9%B1%E5%8A%A8%E4%B8%8E%E8%BF%9E%E6%8E%A5%E7%AE%A1%E7%90%86/</guid>
      <description>&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Redis(5.0.3)定时任务serverCron</title>
      <link>http://cbsheng.github.io/posts/redis%E5%AE%9A%E6%97%B6%E4%BB%BB%E5%8A%A1servercron/</link>
      <pubDate>Sun, 31 Mar 2019 00:00:00 +0000</pubDate>
      
      <guid>http://cbsheng.github.io/posts/redis%E5%AE%9A%E6%97%B6%E4%BB%BB%E5%8A%A1servercron/</guid>
      <description>&lt;p&gt;redis里很多非响应命令的功能，例如持久化、内存淘汰、复制、cluster等等，是需要设置一个定时任务来完成的。并且这里部分的定时任务的执与响应命令的执行是混在一个线程中。意味着定时任务执行过慢会影响redis的性能。&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Redis(5.0.3)里一个简单请求如何被处理</title>
      <link>http://cbsheng.github.io/posts/redis%E9%87%8C%E4%B8%80%E4%B8%AA%E7%AE%80%E5%8D%95%E8%AF%B7%E6%B1%82%E5%A6%82%E4%BD%95%E8%A2%AB%E5%A4%84%E7%90%86/</link>
      <pubDate>Sun, 31 Mar 2019 00:00:00 +0000</pubDate>
      
      <guid>http://cbsheng.github.io/posts/redis%E9%87%8C%E4%B8%80%E4%B8%AA%E7%AE%80%E5%8D%95%E8%AF%B7%E6%B1%82%E5%A6%82%E4%BD%95%E8%A2%AB%E5%A4%84%E7%90%86/</guid>
      <description>&lt;p&gt;set text &amp;ldquo;hello world&amp;rdquo; 从进入服务器到输出结果，整个流程是怎样的？带着这个问题来看看源码。
&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Redis(5.0.3)源码分析之sds对象</title>
      <link>http://cbsheng.github.io/posts/redis%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90%E4%B9%8Bsds%E5%AF%B9%E8%B1%A1/</link>
      <pubDate>Sat, 30 Mar 2019 00:00:00 +0000</pubDate>
      
      <guid>http://cbsheng.github.io/posts/redis%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90%E4%B9%8Bsds%E5%AF%B9%E8%B1%A1/</guid>
      <description>&lt;p&gt;sds是redis中定义字符串对象，它比C中的字符串类型对象更为高效、安全。
&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>fasthttp源码&amp;最佳实践分析</title>
      <link>http://cbsheng.github.io/posts/fasthttp%E6%BA%90%E7%A0%81%E6%9C%80%E4%BD%B3%E5%AE%9E%E8%B7%B5%E5%88%86%E6%9E%90/</link>
      <pubDate>Tue, 26 Mar 2019 00:00:00 +0000</pubDate>
      
      <guid>http://cbsheng.github.io/posts/fasthttp%E6%BA%90%E7%A0%81%E6%9C%80%E4%BD%B3%E5%AE%9E%E8%B7%B5%E5%88%86%E6%9E%90/</guid>
      <description>&lt;p&gt;fasthttp号称比net/http快十倍，并且更少的内存分配。性能测试可以自行执行go test -bench。&lt;/p&gt;

&lt;p&gt;同时fasthttp也给出自己的&lt;a href=&#34;https://github.com/valyala/fasthttp#fasthttp-best-practices&#34;&gt;最佳实践&lt;/a&gt;。个人理解这些实践也算是gopher的基本功。&lt;/p&gt;

&lt;p&gt;让我们来看看fasthttp在源码中是如何应用这些最佳实践的。
&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>探索golang程序启动过程</title>
      <link>http://cbsheng.github.io/posts/%E6%8E%A2%E7%B4%A2golang%E7%A8%8B%E5%BA%8F%E5%90%AF%E5%8A%A8%E8%BF%87%E7%A8%8B/</link>
      <pubDate>Sat, 15 Sep 2018 00:00:00 +0000</pubDate>
      
      <guid>http://cbsheng.github.io/posts/%E6%8E%A2%E7%B4%A2golang%E7%A8%8B%E5%BA%8F%E5%90%AF%E5%8A%A8%E8%BF%87%E7%A8%8B/</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;go version == 1.9.3&lt;/p&gt;

&lt;p&gt;GOARCH=&amp;ldquo;amd64&amp;rdquo;&lt;/p&gt;

&lt;p&gt;GOOS=&amp;ldquo;darwin&amp;rdquo;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;本文探索下go程序是如何启动起来的。
&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>探索goroutine的创建</title>
      <link>http://cbsheng.github.io/posts/%E6%8E%A2%E7%B4%A2goroutine%E7%9A%84%E5%88%9B%E5%BB%BA/</link>
      <pubDate>Sat, 15 Sep 2018 00:00:00 +0000</pubDate>
      
      <guid>http://cbsheng.github.io/posts/%E6%8E%A2%E7%B4%A2goroutine%E7%9A%84%E5%88%9B%E5%BB%BA/</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;go 1.9.3&lt;/p&gt;

&lt;p&gt;GOARCH=&amp;ldquo;amd64&amp;rdquo;
GOOS=&amp;ldquo;darwin&amp;rdquo;&lt;/p&gt;

&lt;p&gt;本文使用&lt;a href=&#34;https://github.com/derekparker/delve&#34;&gt;delve&lt;/a&gt;进行调试&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&#34;创建一个goroutine&#34;&gt;创建一个goroutine&lt;/h3&gt;

&lt;p&gt;一个go语法就很容易地创建出一个goroutine了。（本文也基于这个程序进行分析）
&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>探索goroutine的销毁</title>
      <link>http://cbsheng.github.io/posts/%E6%8E%A2%E7%B4%A2goroutine%E7%9A%84%E9%94%80%E6%AF%81/</link>
      <pubDate>Sat, 15 Sep 2018 00:00:00 +0000</pubDate>
      
      <guid>http://cbsheng.github.io/posts/%E6%8E%A2%E7%B4%A2goroutine%E7%9A%84%E9%94%80%E6%AF%81/</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;go version = 1.9.3&lt;/p&gt;

&lt;p&gt;GOARCH=&amp;ldquo;amd64&amp;rdquo;
GOOS=&amp;ldquo;darwin&amp;rdquo;&lt;/p&gt;

&lt;p&gt;本文使用&lt;a href=&#34;https://github.com/derekparker/delve&#34;&gt;delve&lt;/a&gt;进行调试&lt;/p&gt;

&lt;p&gt;goroutine实际不会被销毁，而是结束后放在free goroutine里等待被再次使用
&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>通过断点跟踪探索Vue响应原理</title>
      <link>http://cbsheng.github.io/posts/%E9%80%9A%E8%BF%87%E6%96%AD%E7%82%B9%E8%B7%9F%E8%B8%AA%E6%8E%A2%E7%B4%A2vue%E5%93%8D%E5%BA%94%E5%8E%9F%E7%90%86/</link>
      <pubDate>Sat, 01 Sep 2018 00:00:00 +0000</pubDate>
      
      <guid>http://cbsheng.github.io/posts/%E9%80%9A%E8%BF%87%E6%96%AD%E7%82%B9%E8%B7%9F%E8%B8%AA%E6%8E%A2%E7%B4%A2vue%E5%93%8D%E5%BA%94%E5%8E%9F%E7%90%86/</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;基于版本2.5.2源码分析&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&#34;响应原理&#34;&gt;响应原理&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt;&lt;a href=&#34;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/defineProperty&#34;&gt;Object.defineProperty()&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://en.wikipedia.org/wiki/Observer_pattern&#34;&gt;观察者模式&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>计算机网络笔记-运输层2</title>
      <link>http://cbsheng.github.io/posts/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E7%AC%94%E8%AE%B02-%E8%BF%90%E8%BE%93%E5%B1%82/</link>
      <pubDate>Thu, 06 Aug 2015 00:00:00 +0000</pubDate>
      
      <guid>http://cbsheng.github.io/posts/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E7%AC%94%E8%AE%B02-%E8%BF%90%E8%BE%93%E5%B1%82/</guid>
      <description>&lt;p&gt;运输层还有很多有趣的事情。&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>从硬件出发，浅谈操作系统的段机制与页机制</title>
      <link>http://cbsheng.github.io/posts/%E4%BB%8E%E7%A1%AC%E4%BB%B6%E5%87%BA%E5%8F%91%E6%B5%85%E8%B0%88%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E7%9A%84%E6%AE%B5%E6%9C%BA%E5%88%B6%E4%B8%8E%E9%A1%B5%E6%9C%BA%E5%88%B6/</link>
      <pubDate>Tue, 16 Jun 2015 00:00:00 +0000</pubDate>
      
      <guid>http://cbsheng.github.io/posts/%E4%BB%8E%E7%A1%AC%E4%BB%B6%E5%87%BA%E5%8F%91%E6%B5%85%E8%B0%88%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E7%9A%84%E6%AE%B5%E6%9C%BA%E5%88%B6%E4%B8%8E%E9%A1%B5%E6%9C%BA%E5%88%B6/</guid>
      <description>&lt;p&gt;我们写一个程序，经过编译之后会变成一堆的指令。操作系统在执行这个程序的时候，也正是执行这堆指令。
指令可以是 取数据的指令 或 取下一条被执行指令 的指令。但无论是什么指令，都会进行内存的访问和寻址。就像是我们必须找到东西放在哪里，我们才能去使用它。&lt;/p&gt;

&lt;p&gt;那操作系统怎样帮我们去寻址呢？答案是 内存寻址涉及到内存的 段机制 和 页机制。
&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>计算机网络笔记-网络层</title>
      <link>http://cbsheng.github.io/posts/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E7%AC%94%E8%AE%B0-%E7%BD%91%E7%BB%9C%E5%B1%82/</link>
      <pubDate>Wed, 10 Dec 2014 00:00:00 +0000</pubDate>
      
      <guid>http://cbsheng.github.io/posts/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E7%AC%94%E8%AE%B0-%E7%BD%91%E7%BB%9C%E5%B1%82/</guid>
      <description>&lt;p&gt;因特网的网络层是提供了单一的服务，称为&lt;strong&gt;尽力而为服务&lt;/strong&gt;。网络层向上只提供简单灵活的、无连接的、尽最大努力交付的数据报服务。网络层不提供服务质量的承诺。&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>计算机网络笔记-运输层</title>
      <link>http://cbsheng.github.io/posts/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E7%AC%94%E8%AE%B0-%E8%BF%90%E8%BE%93%E5%B1%82/</link>
      <pubDate>Wed, 10 Dec 2014 00:00:00 +0000</pubDate>
      
      <guid>http://cbsheng.github.io/posts/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E7%AC%94%E8%AE%B0-%E8%BF%90%E8%BE%93%E5%B1%82/</guid>
      <description>&lt;p&gt;运输层是居于网络层之上，应用层之下。在运输层中，有着两个十分重要的因特网协议：&lt;strong&gt;TCP&lt;/strong&gt;和&lt;strong&gt;UDP&lt;/strong&gt;运输层协议。&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>现代操作系统-笔记</title>
      <link>http://cbsheng.github.io/posts/%E7%8E%B0%E4%BB%A3%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F-%E7%AC%94%E8%AE%B0/</link>
      <pubDate>Thu, 20 Nov 2014 00:00:00 +0000</pubDate>
      
      <guid>http://cbsheng.github.io/posts/%E7%8E%B0%E4%BB%A3%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F-%E7%AC%94%E8%AE%B0/</guid>
      <description>&lt;p&gt;本文整理了在学习操作系统储存管理过程中的一些知识点和思考。如有错漏，还望指正。&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
  </channel>
</rss>