<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Go 1.13 on 木白的技术私厨</title>
    <link>http://cbsheng.github.io/categories/go-1.13/</link>
    <description>Recent content in Go 1.13 on 木白的技术私厨</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <copyright>&amp;copy; Copyright 2017-2019 木白</copyright>
    <lastBuildDate>Fri, 06 Sep 2019 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="http://cbsheng.github.io/categories/go-1.13/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>go1.13之Error Warp</title>
      <link>http://cbsheng.github.io/posts/go113%E4%B9%8Berrorwrap/</link>
      <pubDate>Fri, 06 Sep 2019 00:00:00 +0000</pubDate>
      
      <guid>http://cbsheng.github.io/posts/go113%E4%B9%8Berrorwrap/</guid>
      <description>&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>go1.13之Error Warp</title>
      <link>http://cbsheng.github.io/posts/%E8%BA%B2%E9%81%BFgo113defer%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96%E7%9A%84%E5%A7%BF%E5%8A%BF/</link>
      <pubDate>Fri, 06 Sep 2019 00:00:00 +0000</pubDate>
      
      <guid>http://cbsheng.github.io/posts/%E8%BA%B2%E9%81%BFgo113defer%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96%E7%9A%84%E5%A7%BF%E5%8A%BF/</guid>
      <description>本文给出使用go1.13 defer时应该避免的姿势。
性能提升30%的原理和defer本身的原理不做介绍。这两项可分别参考资料1，2，3。
资料1简单给出性能提升的一些关键点。重点是原来defer语法依赖的_defer数据结构只能分配在堆上，新版本中可以针对性分配在栈上。免去了systemstack()或mallocgc()带来的开销。
资料2-3详细介绍了defer原理；此原理在go1.13版本中不过时，因为go1.13的优化场景具有针对性。
简单来说，要想享受defer带来的30%性能提升。以下两种场景的代码要避免：
 defer语句外层嵌套有显式循环； defer语句有隐式循环；  显式循环考虑以下代码
1 2 3 4 5 6 7  package main func main() { for i := 0; i &amp;lt;= 0; i++ { defer func() {}() } }   看汇编结果，底层调用的是runtime.deferproc。还是老方式，即_defer对象分配在堆上。
1 2 3 4  &amp;#34;&amp;#34;.main STEXT size=121 args=0x0 locals=0x20 # ...  0x0047 00071 (main.go:5) CALL runtime.deferproc(SB) # ...   注意循环只执行一次，实际只要它有循环次数，都是在堆上分配对象。等于性能优化享受不了。
1 2  for i := 0; i &amp;lt;= -1; i++ {} // 堆和栈都不分配。因为循环不被执行 for i := 0; i &amp;lt;= [等于或大于0的任何正整数]; i++ {} // 分配在堆上   隐式循环考虑以下代码</description>
    </item>
    
  </channel>
</rss>