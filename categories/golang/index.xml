<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Golang on 木白的技术私厨</title>
    <link>http://cbsheng.github.io/categories/golang/</link>
    <description>Recent content in Golang on 木白的技术私厨</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <copyright>&amp;copy; Copyright 2017-2019 木白</copyright>
    <lastBuildDate>Fri, 06 Sep 2019 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="http://cbsheng.github.io/categories/golang/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>go1.13之Error Warp</title>
      <link>http://cbsheng.github.io/posts/go113%E4%B9%8Berrorwrap/</link>
      <pubDate>Fri, 06 Sep 2019 00:00:00 +0000</pubDate>
      
      <guid>http://cbsheng.github.io/posts/go113%E4%B9%8Berrorwrap/</guid>
      <description>&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>go1.13之Error Warp</title>
      <link>http://cbsheng.github.io/posts/%E8%BA%B2%E9%81%BFgo113defer%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96%E7%9A%84%E5%A7%BF%E5%8A%BF/</link>
      <pubDate>Fri, 06 Sep 2019 00:00:00 +0000</pubDate>
      
      <guid>http://cbsheng.github.io/posts/%E8%BA%B2%E9%81%BFgo113defer%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96%E7%9A%84%E5%A7%BF%E5%8A%BF/</guid>
      <description>本文给出使用go1.13 defer时应该避免的姿势。
性能提升30%的原理和defer本身的原理不做介绍。这两项可分别参考资料1，2，3。
资料1简单给出性能提升的一些关键点。重点是原来defer语法依赖的_defer数据结构只能分配在堆上，新版本中可以针对性分配在栈上。免去了systemstack()或mallocgc()带来的开销。
资料2-3详细介绍了defer原理；此原理在go1.13版本中不过时，因为go1.13的优化场景具有针对性。
简单来说，要想享受defer带来的30%性能提升。以下两种场景的代码要避免：
 defer语句外层嵌套有显式循环； defer语句有隐式循环；  显式循环考虑以下代码
1 2 3 4 5 6 7  package main func main() { for i := 0; i &amp;lt;= 0; i++ { defer func() {}() } }   看汇编结果，底层调用的是runtime.deferproc。还是老方式，即_defer对象分配在堆上。
1 2 3 4  &amp;#34;&amp;#34;.main STEXT size=121 args=0x0 locals=0x20 # ...  0x0047 00071 (main.go:5) CALL runtime.deferproc(SB) # ...   注意循环只执行一次，实际只要它有循环次数，都是在堆上分配对象。等于性能优化享受不了。
1 2  for i := 0; i &amp;lt;= -1; i++ {} // 堆和栈都不分配。因为循环不被执行 for i := 0; i &amp;lt;= [等于或大于0的任何正整数]; i++ {} // 分配在堆上   隐式循环考虑以下代码</description>
    </item>
    
    <item>
      <title>go benchmark实践与原理</title>
      <link>http://cbsheng.github.io/posts/go_benchmark%E5%AE%9E%E8%B7%B5%E4%B8%8E%E5%8E%9F%E7%90%86/</link>
      <pubDate>Sat, 31 Aug 2019 00:00:00 +0000</pubDate>
      
      <guid>http://cbsheng.github.io/posts/go_benchmark%E5%AE%9E%E8%B7%B5%E4%B8%8E%E5%8E%9F%E7%90%86/</guid>
      <description>&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>请问sync.Pool有什么缺点?</title>
      <link>http://cbsheng.github.io/posts/%E8%AF%B7%E9%97%AEsync.pool%E6%9C%89%E4%BB%80%E4%B9%88%E7%BC%BA%E7%82%B9/</link>
      <pubDate>Mon, 05 Aug 2019 00:00:00 +0000</pubDate>
      
      <guid>http://cbsheng.github.io/posts/%E8%AF%B7%E9%97%AEsync.pool%E6%9C%89%E4%BB%80%E4%B9%88%E7%BC%BA%E7%82%B9/</guid>
      <description>&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>你真的会用sync.WaitGroup吗</title>
      <link>http://cbsheng.github.io/posts/%E4%BD%A0%E7%9C%9F%E7%9A%84%E4%BC%9A%E7%94%A8sync.waitgroup%E5%90%97/</link>
      <pubDate>Sat, 27 Jul 2019 00:00:00 +0000</pubDate>
      
      <guid>http://cbsheng.github.io/posts/%E4%BD%A0%E7%9C%9F%E7%9A%84%E4%BC%9A%E7%94%A8sync.waitgroup%E5%90%97/</guid>
      <description>&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>一份详细注释的go Mutex源码</title>
      <link>http://cbsheng.github.io/posts/%E4%B8%80%E4%BB%BD%E8%AF%A6%E7%BB%86%E6%B3%A8%E9%87%8A%E7%9A%84go-mutex%E6%BA%90%E7%A0%81/</link>
      <pubDate>Fri, 26 Jul 2019 00:00:00 +0000</pubDate>
      
      <guid>http://cbsheng.github.io/posts/%E4%B8%80%E4%BB%BD%E8%AF%A6%E7%BB%86%E6%B3%A8%E9%87%8A%E7%9A%84go-mutex%E6%BA%90%E7%A0%81/</guid>
      <description>&lt;p&gt;带注释的源码在文章最后&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>GODEBUG之gctrace解析</title>
      <link>http://cbsheng.github.io/posts/godebug%E4%B9%8Bgctrace%E8%A7%A3%E6%9E%90/</link>
      <pubDate>Mon, 08 Jul 2019 00:00:00 +0000</pubDate>
      
      <guid>http://cbsheng.github.io/posts/godebug%E4%B9%8Bgctrace%E8%A7%A3%E6%9E%90/</guid>
      <description>&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>golang标准库sync.Pool原理及源码简析</title>
      <link>http://cbsheng.github.io/posts/golang%E6%A0%87%E5%87%86%E5%BA%93sync.pool%E5%8E%9F%E7%90%86%E5%8F%8A%E6%BA%90%E7%A0%81%E7%AE%80%E6%9E%90/</link>
      <pubDate>Fri, 07 Jun 2019 00:00:00 +0000</pubDate>
      
      <guid>http://cbsheng.github.io/posts/golang%E6%A0%87%E5%87%86%E5%BA%93sync.pool%E5%8E%9F%E7%90%86%E5%8F%8A%E6%BA%90%E7%A0%81%E7%AE%80%E6%9E%90/</guid>
      <description>&lt;h3 id=&#34;pool关键作用&#34;&gt;pool关键作用:&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt;减轻GC的压力。&lt;/li&gt;
&lt;li&gt;复用对象内存。有时不一定希望复用内存，单纯是想减轻GC压力也可主动给pool塞对象。&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>go的channel源码层理解</title>
      <link>http://cbsheng.github.io/posts/go%E7%9A%84channel%E6%BA%90%E7%A0%81%E5%B1%82%E7%90%86%E8%A7%A3/</link>
      <pubDate>Sun, 02 Jun 2019 00:00:00 +0000</pubDate>
      
      <guid>http://cbsheng.github.io/posts/go%E7%9A%84channel%E6%BA%90%E7%A0%81%E5%B1%82%E7%90%86%E8%A7%A3/</guid>
      <description>&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>fasthttp源码&amp;最佳实践分析</title>
      <link>http://cbsheng.github.io/posts/fasthttp%E6%BA%90%E7%A0%81%E6%9C%80%E4%BD%B3%E5%AE%9E%E8%B7%B5%E5%88%86%E6%9E%90/</link>
      <pubDate>Tue, 26 Mar 2019 00:00:00 +0000</pubDate>
      
      <guid>http://cbsheng.github.io/posts/fasthttp%E6%BA%90%E7%A0%81%E6%9C%80%E4%BD%B3%E5%AE%9E%E8%B7%B5%E5%88%86%E6%9E%90/</guid>
      <description>&lt;p&gt;fasthttp号称比net/http快十倍，并且更少的内存分配。性能测试可以自行执行go test -bench。&lt;/p&gt;

&lt;p&gt;同时fasthttp也给出自己的&lt;a href=&#34;https://github.com/valyala/fasthttp#fasthttp-best-practices&#34;&gt;最佳实践&lt;/a&gt;。个人理解这些实践也算是gopher的基本功。&lt;/p&gt;

&lt;p&gt;让我们来看看fasthttp在源码中是如何应用这些最佳实践的。
&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>探索golang程序启动过程</title>
      <link>http://cbsheng.github.io/posts/%E6%8E%A2%E7%B4%A2golang%E7%A8%8B%E5%BA%8F%E5%90%AF%E5%8A%A8%E8%BF%87%E7%A8%8B/</link>
      <pubDate>Sat, 15 Sep 2018 00:00:00 +0000</pubDate>
      
      <guid>http://cbsheng.github.io/posts/%E6%8E%A2%E7%B4%A2golang%E7%A8%8B%E5%BA%8F%E5%90%AF%E5%8A%A8%E8%BF%87%E7%A8%8B/</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;go version == 1.9.3&lt;/p&gt;

&lt;p&gt;GOARCH=&amp;ldquo;amd64&amp;rdquo;&lt;/p&gt;

&lt;p&gt;GOOS=&amp;ldquo;darwin&amp;rdquo;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;本文探索下go程序是如何启动起来的。
&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>探索goroutine的创建</title>
      <link>http://cbsheng.github.io/posts/%E6%8E%A2%E7%B4%A2goroutine%E7%9A%84%E5%88%9B%E5%BB%BA/</link>
      <pubDate>Sat, 15 Sep 2018 00:00:00 +0000</pubDate>
      
      <guid>http://cbsheng.github.io/posts/%E6%8E%A2%E7%B4%A2goroutine%E7%9A%84%E5%88%9B%E5%BB%BA/</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;go 1.9.3&lt;/p&gt;

&lt;p&gt;GOARCH=&amp;ldquo;amd64&amp;rdquo;
GOOS=&amp;ldquo;darwin&amp;rdquo;&lt;/p&gt;

&lt;p&gt;本文使用&lt;a href=&#34;https://github.com/derekparker/delve&#34;&gt;delve&lt;/a&gt;进行调试&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&#34;创建一个goroutine&#34;&gt;创建一个goroutine&lt;/h3&gt;

&lt;p&gt;一个go语法就很容易地创建出一个goroutine了。（本文也基于这个程序进行分析）
&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>探索goroutine的销毁</title>
      <link>http://cbsheng.github.io/posts/%E6%8E%A2%E7%B4%A2goroutine%E7%9A%84%E9%94%80%E6%AF%81/</link>
      <pubDate>Sat, 15 Sep 2018 00:00:00 +0000</pubDate>
      
      <guid>http://cbsheng.github.io/posts/%E6%8E%A2%E7%B4%A2goroutine%E7%9A%84%E9%94%80%E6%AF%81/</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;go version = 1.9.3&lt;/p&gt;

&lt;p&gt;GOARCH=&amp;ldquo;amd64&amp;rdquo;
GOOS=&amp;ldquo;darwin&amp;rdquo;&lt;/p&gt;

&lt;p&gt;本文使用&lt;a href=&#34;https://github.com/derekparker/delve&#34;&gt;delve&lt;/a&gt;进行调试&lt;/p&gt;

&lt;p&gt;goroutine实际不会被销毁，而是结束后放在free goroutine里等待被再次使用
&lt;/p&gt;</description>
    </item>
    
  </channel>
</rss>