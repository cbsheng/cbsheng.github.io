<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>源码分析 on 无远弗届</title>
    <link>http://cbsheng.github.io/categories/%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/</link>
    <description>Recent content in 源码分析 on 无远弗届</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <copyright>&amp;copy; Copyright 2017-2018 cbsheng</copyright>
    <lastBuildDate>Fri, 26 Jul 2019 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="http://cbsheng.github.io/categories/%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>一份详细注释的go Mutex源码</title>
      <link>http://cbsheng.github.io/posts/%E4%B8%80%E4%BB%BD%E8%AF%A6%E7%BB%86%E6%B3%A8%E9%87%8A%E7%9A%84go-mutex%E6%BA%90%E7%A0%81/</link>
      <pubDate>Fri, 26 Jul 2019 00:00:00 +0000</pubDate>
      
      <guid>http://cbsheng.github.io/posts/%E4%B8%80%E4%BB%BD%E8%AF%A6%E7%BB%86%E6%B3%A8%E9%87%8A%E7%9A%84go-mutex%E6%BA%90%E7%A0%81/</guid>
      <description>&lt;p&gt;带注释的源码在文章最后&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>golang标准库sync.Pool原理及源码简析</title>
      <link>http://cbsheng.github.io/posts/golang%E6%A0%87%E5%87%86%E5%BA%93sync.pool%E5%8E%9F%E7%90%86%E5%8F%8A%E6%BA%90%E7%A0%81%E7%AE%80%E6%9E%90/</link>
      <pubDate>Fri, 07 Jun 2019 00:00:00 +0000</pubDate>
      
      <guid>http://cbsheng.github.io/posts/golang%E6%A0%87%E5%87%86%E5%BA%93sync.pool%E5%8E%9F%E7%90%86%E5%8F%8A%E6%BA%90%E7%A0%81%E7%AE%80%E6%9E%90/</guid>
      <description>&lt;h3 id=&#34;pool关键作用&#34;&gt;pool关键作用:&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt;减轻GC的压力。&lt;/li&gt;
&lt;li&gt;复用对象内存。有时不一定希望复用内存，单纯是想减轻GC压力也可主动给pool塞对象。&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Redis(5.0.3)内存淘汰LRU/LFU</title>
      <link>http://cbsheng.github.io/posts/redis%E5%86%85%E5%AD%98%E6%B7%98%E6%B1%B0lru%E5%92%8Clfu/</link>
      <pubDate>Mon, 20 May 2019 00:00:00 +0000</pubDate>
      
      <guid>http://cbsheng.github.io/posts/redis%E5%86%85%E5%AD%98%E6%B7%98%E6%B1%B0lru%E5%92%8Clfu/</guid>
      <description>&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Redis(5.0.3)事件驱动与连接管理</title>
      <link>http://cbsheng.github.io/posts/redis%E4%BA%8B%E4%BB%B6%E9%A9%B1%E5%8A%A8%E4%B8%8E%E8%BF%9E%E6%8E%A5%E7%AE%A1%E7%90%86/</link>
      <pubDate>Sun, 31 Mar 2019 00:00:00 +0000</pubDate>
      
      <guid>http://cbsheng.github.io/posts/redis%E4%BA%8B%E4%BB%B6%E9%A9%B1%E5%8A%A8%E4%B8%8E%E8%BF%9E%E6%8E%A5%E7%AE%A1%E7%90%86/</guid>
      <description>&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Redis(5.0.3)定时任务serverCron</title>
      <link>http://cbsheng.github.io/posts/redis%E5%AE%9A%E6%97%B6%E4%BB%BB%E5%8A%A1servercron/</link>
      <pubDate>Sun, 31 Mar 2019 00:00:00 +0000</pubDate>
      
      <guid>http://cbsheng.github.io/posts/redis%E5%AE%9A%E6%97%B6%E4%BB%BB%E5%8A%A1servercron/</guid>
      <description>&lt;p&gt;redis里很多非响应命令的功能，例如持久化、内存淘汰、复制、cluster等等，是需要设置一个定时任务来完成的。并且这里部分的定时任务的执与响应命令的执行是混在一个线程中。意味着定时任务执行过慢会影响redis的性能。&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Redis(5.0.3)里一个简单请求如何被处理</title>
      <link>http://cbsheng.github.io/posts/redis%E9%87%8C%E4%B8%80%E4%B8%AA%E7%AE%80%E5%8D%95%E8%AF%B7%E6%B1%82%E5%A6%82%E4%BD%95%E8%A2%AB%E5%A4%84%E7%90%86/</link>
      <pubDate>Sun, 31 Mar 2019 00:00:00 +0000</pubDate>
      
      <guid>http://cbsheng.github.io/posts/redis%E9%87%8C%E4%B8%80%E4%B8%AA%E7%AE%80%E5%8D%95%E8%AF%B7%E6%B1%82%E5%A6%82%E4%BD%95%E8%A2%AB%E5%A4%84%E7%90%86/</guid>
      <description>&lt;p&gt;set text &amp;ldquo;hello world&amp;rdquo; 从进入服务器到输出结果，整个流程是怎样的？带着这个问题来看看源码。
&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Redis(5.0.3)源码分析之sds对象</title>
      <link>http://cbsheng.github.io/posts/redis%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90%E4%B9%8Bsds%E5%AF%B9%E8%B1%A1/</link>
      <pubDate>Sat, 30 Mar 2019 00:00:00 +0000</pubDate>
      
      <guid>http://cbsheng.github.io/posts/redis%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90%E4%B9%8Bsds%E5%AF%B9%E8%B1%A1/</guid>
      <description>&lt;p&gt;sds是redis中定义字符串对象，它比C中的字符串类型对象更为高效、安全。
&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>fasthttp源码&amp;最佳实践分析</title>
      <link>http://cbsheng.github.io/posts/fasthttp%E6%BA%90%E7%A0%81%E6%9C%80%E4%BD%B3%E5%AE%9E%E8%B7%B5%E5%88%86%E6%9E%90/</link>
      <pubDate>Tue, 26 Mar 2019 00:00:00 +0000</pubDate>
      
      <guid>http://cbsheng.github.io/posts/fasthttp%E6%BA%90%E7%A0%81%E6%9C%80%E4%BD%B3%E5%AE%9E%E8%B7%B5%E5%88%86%E6%9E%90/</guid>
      <description>&lt;p&gt;fasthttp号称比net/http快十倍，并且更少的内存分配。性能测试可以自行执行go test -bench。&lt;/p&gt;

&lt;p&gt;同时fasthttp也给出自己的&lt;a href=&#34;https://github.com/valyala/fasthttp#fasthttp-best-practices&#34;&gt;最佳实践&lt;/a&gt;。个人理解这些实践也算是gopher的基本功。&lt;/p&gt;

&lt;p&gt;让我们来看看fasthttp在源码中是如何应用这些最佳实践的。
&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>探索golang程序启动过程</title>
      <link>http://cbsheng.github.io/posts/%E6%8E%A2%E7%B4%A2golang%E7%A8%8B%E5%BA%8F%E5%90%AF%E5%8A%A8%E8%BF%87%E7%A8%8B/</link>
      <pubDate>Sat, 15 Sep 2018 00:00:00 +0000</pubDate>
      
      <guid>http://cbsheng.github.io/posts/%E6%8E%A2%E7%B4%A2golang%E7%A8%8B%E5%BA%8F%E5%90%AF%E5%8A%A8%E8%BF%87%E7%A8%8B/</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;go version == 1.9.3&lt;/p&gt;

&lt;p&gt;GOARCH=&amp;ldquo;amd64&amp;rdquo;&lt;/p&gt;

&lt;p&gt;GOOS=&amp;ldquo;darwin&amp;rdquo;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;本文探索下go程序是如何启动起来的。
&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>探索goroutine的创建</title>
      <link>http://cbsheng.github.io/posts/%E6%8E%A2%E7%B4%A2goroutine%E7%9A%84%E5%88%9B%E5%BB%BA/</link>
      <pubDate>Sat, 15 Sep 2018 00:00:00 +0000</pubDate>
      
      <guid>http://cbsheng.github.io/posts/%E6%8E%A2%E7%B4%A2goroutine%E7%9A%84%E5%88%9B%E5%BB%BA/</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;go 1.9.3&lt;/p&gt;

&lt;p&gt;GOARCH=&amp;ldquo;amd64&amp;rdquo;
GOOS=&amp;ldquo;darwin&amp;rdquo;&lt;/p&gt;

&lt;p&gt;本文使用&lt;a href=&#34;https://github.com/derekparker/delve&#34;&gt;delve&lt;/a&gt;进行调试&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&#34;创建一个goroutine&#34;&gt;创建一个goroutine&lt;/h3&gt;

&lt;p&gt;一个go语法就很容易地创建出一个goroutine了。（本文也基于这个程序进行分析）
&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>探索goroutine的销毁</title>
      <link>http://cbsheng.github.io/posts/%E6%8E%A2%E7%B4%A2goroutine%E7%9A%84%E9%94%80%E6%AF%81/</link>
      <pubDate>Sat, 15 Sep 2018 00:00:00 +0000</pubDate>
      
      <guid>http://cbsheng.github.io/posts/%E6%8E%A2%E7%B4%A2goroutine%E7%9A%84%E9%94%80%E6%AF%81/</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;go version = 1.9.3&lt;/p&gt;

&lt;p&gt;GOARCH=&amp;ldquo;amd64&amp;rdquo;
GOOS=&amp;ldquo;darwin&amp;rdquo;&lt;/p&gt;

&lt;p&gt;本文使用&lt;a href=&#34;https://github.com/derekparker/delve&#34;&gt;delve&lt;/a&gt;进行调试&lt;/p&gt;

&lt;p&gt;goroutine实际不会被销毁，而是结束后放在free goroutine里等待被再次使用
&lt;/p&gt;</description>
    </item>
    
  </channel>
</rss>