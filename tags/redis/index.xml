<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Redis on 无远弗届</title>
    <link>http://cbsheng.github.io/tags/redis/</link>
    <description>Recent content in Redis on 无远弗届</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <copyright>&amp;copy; Copyright 2017-2018 cbsheng</copyright>
    <lastBuildDate>Mon, 20 May 2019 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="http://cbsheng.github.io/tags/redis/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Redis(5.0.3)内存淘汰LRU/LFU</title>
      <link>http://cbsheng.github.io/posts/redis%E5%86%85%E5%AD%98%E6%B7%98%E6%B1%B0lru%E5%92%8Clfu/</link>
      <pubDate>Mon, 20 May 2019 00:00:00 +0000</pubDate>
      
      <guid>http://cbsheng.github.io/posts/redis%E5%86%85%E5%AD%98%E6%B7%98%E6%B1%B0lru%E5%92%8Clfu/</guid>
      <description>简介 redis的LRU与LFU都是概率算法。并不是绝对准确的LRU或LFU算法。
Redis在内存满载时触发内存淘汰，最开始是有概率淘汰掉一些不应该淘汰的key。但它会越来越准。这一切都是因为Redis采用了一个全局池子来存放待淘汰key，池子是带序的，按key的空闲时间从小到大。
每次入池子的key，都是从keyspace(db-&amp;gt;dict或db-&amp;gt;expires)中随机挑选的(随机挑选的个数由maxmemory-samples参数控制，默认5个)。在入池的时候，如果池子里已经有key，就采用插入的思想，把新key插在合适的位置保持池子有序。
例如池子末端有空间：e要放进[a,b,c,d,NULL]中c的位置，先挪成[a,b,c,c,d]，然后把e覆盖进去，变成[a,b,e,c,d]。
池子末端没有空间：e要放进[a,b,c,d]中c的位置，先挪成[b,c,c,d]，然后把e覆盖进去，变成[b,c,e,d]
key的空闲时间又是如何记录的？
LRU或LFU策略都共用了redisObject里的lru字段，它总长24位，前16位用于LRU，而LFU则用到24位。
1 2 3 4 5 6 7 8 9 10 11  #define LRU_BITS 24 typedef struct redisObject { // var:4 的写法用了位域  unsigned type:4; unsigned encoding:4; unsigned lru:LRU_BITS; /* LRU time (relative to global lru_clock) or * LFU data (least significant 8 bits frequency * and most significant 16 bits access time). */ int refcount; void *ptr; } robj;   而LFU也分成前16位和后8位来用，前16位和LRU保持一致，用来放置访问时间。后8位用来存放访问次数。</description>
    </item>
    
    <item>
      <title>Redis(5.0.3)事件驱动与连接管理</title>
      <link>http://cbsheng.github.io/posts/redis%E4%BA%8B%E4%BB%B6%E9%A9%B1%E5%8A%A8%E4%B8%8E%E8%BF%9E%E6%8E%A5%E7%AE%A1%E7%90%86/</link>
      <pubDate>Sun, 31 Mar 2019 00:00:00 +0000</pubDate>
      
      <guid>http://cbsheng.github.io/posts/redis%E4%BA%8B%E4%BB%B6%E9%A9%B1%E5%8A%A8%E4%B8%8E%E8%BF%9E%E6%8E%A5%E7%AE%A1%E7%90%86/</guid>
      <description>&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Redis(5.0.3)定时任务serverCron</title>
      <link>http://cbsheng.github.io/posts/redis%E5%AE%9A%E6%97%B6%E4%BB%BB%E5%8A%A1servercron/</link>
      <pubDate>Sun, 31 Mar 2019 00:00:00 +0000</pubDate>
      
      <guid>http://cbsheng.github.io/posts/redis%E5%AE%9A%E6%97%B6%E4%BB%BB%E5%8A%A1servercron/</guid>
      <description>&lt;p&gt;redis里很多非响应命令的功能，例如持久化、内存淘汰、复制、cluster等等，是需要设置一个定时任务来完成的。并且这里部分的定时任务的执与响应命令的执行是混在一个线程中。意味着定时任务执行过慢会影响redis的性能。&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Redis(5.0.3)里一个简单请求如何被处理</title>
      <link>http://cbsheng.github.io/posts/redis%E9%87%8C%E4%B8%80%E4%B8%AA%E7%AE%80%E5%8D%95%E8%AF%B7%E6%B1%82%E5%A6%82%E4%BD%95%E8%A2%AB%E5%A4%84%E7%90%86/</link>
      <pubDate>Sun, 31 Mar 2019 00:00:00 +0000</pubDate>
      
      <guid>http://cbsheng.github.io/posts/redis%E9%87%8C%E4%B8%80%E4%B8%AA%E7%AE%80%E5%8D%95%E8%AF%B7%E6%B1%82%E5%A6%82%E4%BD%95%E8%A2%AB%E5%A4%84%E7%90%86/</guid>
      <description>&lt;p&gt;set text &amp;ldquo;hello world&amp;rdquo; 从进入服务器到输出结果，整个流程是怎样的？带着这个问题来看看源码。
&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Redis(5.0.3)源码分析之sds对象</title>
      <link>http://cbsheng.github.io/posts/redis%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90%E4%B9%8Bsds%E5%AF%B9%E8%B1%A1/</link>
      <pubDate>Sat, 30 Mar 2019 00:00:00 +0000</pubDate>
      
      <guid>http://cbsheng.github.io/posts/redis%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90%E4%B9%8Bsds%E5%AF%B9%E8%B1%A1/</guid>
      <description>&lt;p&gt;sds是redis中定义字符串对象，它比C中的字符串类型对象更为高效、安全。
&lt;/p&gt;</description>
    </item>
    
  </channel>
</rss>