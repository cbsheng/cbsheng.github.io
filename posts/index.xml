<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on 无远弗届</title>
    <link>http://cbsheng.github.io/posts/</link>
    <description>Recent content in Posts on 无远弗届</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <copyright>&amp;copy; Copyright 2017-2018 cbsheng</copyright>
    <lastBuildDate>Sat, 15 Sep 2018 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="http://cbsheng.github.io/posts/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>探索goroutine的创建</title>
      <link>http://cbsheng.github.io/posts/%E6%8E%A2%E7%B4%A2goroutine%E7%9A%84%E5%88%9B%E5%BB%BA/</link>
      <pubDate>Sat, 15 Sep 2018 00:00:00 +0000</pubDate>
      
      <guid>http://cbsheng.github.io/posts/%E6%8E%A2%E7%B4%A2goroutine%E7%9A%84%E5%88%9B%E5%BB%BA/</guid>
      <description>go 1.9.3
GOARCH=&amp;ldquo;amd64&amp;rdquo; GOOS=&amp;ldquo;darwin&amp;rdquo;
本文使用delve进行调试
 创建一个goroutine 一个go语法就很容易地创建出一个goroutine了。（本文也基于这个程序进行分析）
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18  // $GOPATH/test/main.go package main import ( &amp;#34;fmt&amp;#34; ) var ch = make(chan bool) func hello() { fmt.Println(&amp;#34;hello world&amp;#34;) close(ch) } func main() { go hello() &amp;lt;- ch }   定位goroutine的创建函数 由于go除了初始化引导部分是使用手写汇编实现之外，其他的像调度器、内存管理、GC都由runtime实现。所以在这儿就只保留与runtime相关的语句。
对照我们的工程代码，不难发现
 runtime.newproc 对应 go hello() runtime.chanrecv1 对应 &amp;lt;- ch  1 2 3 4 5 6 7 8 9 10 11  $ dlv debug test Type &amp;#39;help&amp;#39; for list of commands.</description>
    </item>
    
    <item>
      <title>通过断点跟踪探索Vue响应原理</title>
      <link>http://cbsheng.github.io/posts/%E9%80%9A%E8%BF%87%E6%96%AD%E7%82%B9%E8%B7%9F%E8%B8%AA%E6%8E%A2%E7%B4%A2vue%E5%93%8D%E5%BA%94%E5%8E%9F%E7%90%86/</link>
      <pubDate>Sat, 01 Sep 2018 00:00:00 +0000</pubDate>
      
      <guid>http://cbsheng.github.io/posts/%E9%80%9A%E8%BF%87%E6%96%AD%E7%82%B9%E8%B7%9F%E8%B8%AA%E6%8E%A2%E7%B4%A2vue%E5%93%8D%E5%BA%94%E5%8E%9F%E7%90%86/</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;基于版本2.5.2源码分析&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&#34;响应原理&#34;&gt;响应原理&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt;&lt;a href=&#34;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/defineProperty&#34;&gt;Object.defineProperty()&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://en.wikipedia.org/wiki/Observer_pattern&#34;&gt;观察者模式&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>计算机网络笔记-运输层2</title>
      <link>http://cbsheng.github.io/posts/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E7%AC%94%E8%AE%B02-%E8%BF%90%E8%BE%93%E5%B1%82/</link>
      <pubDate>Thu, 06 Aug 2015 00:00:00 +0000</pubDate>
      
      <guid>http://cbsheng.github.io/posts/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E7%AC%94%E8%AE%B02-%E8%BF%90%E8%BE%93%E5%B1%82/</guid>
      <description>&lt;p&gt;运输层还有很多有趣的事情。&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>从硬件出发，浅谈操作系统的段机制与页机制</title>
      <link>http://cbsheng.github.io/posts/%E4%BB%8E%E7%A1%AC%E4%BB%B6%E5%87%BA%E5%8F%91%E6%B5%85%E8%B0%88%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E7%9A%84%E6%AE%B5%E6%9C%BA%E5%88%B6%E4%B8%8E%E9%A1%B5%E6%9C%BA%E5%88%B6/</link>
      <pubDate>Tue, 16 Jun 2015 00:00:00 +0000</pubDate>
      
      <guid>http://cbsheng.github.io/posts/%E4%BB%8E%E7%A1%AC%E4%BB%B6%E5%87%BA%E5%8F%91%E6%B5%85%E8%B0%88%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E7%9A%84%E6%AE%B5%E6%9C%BA%E5%88%B6%E4%B8%8E%E9%A1%B5%E6%9C%BA%E5%88%B6/</guid>
      <description>&lt;p&gt;我们写一个程序，经过编译之后会变成一堆的指令。操作系统在执行这个程序的时候，也正是执行这堆指令。
指令可以是 取数据的指令 或 取下一条被执行指令 的指令。但无论是什么指令，都会进行内存的访问和寻址。就像是我们必须找到东西放在哪里，我们才能去使用它。&lt;/p&gt;

&lt;p&gt;那操作系统怎样帮我们去寻址呢？答案是 内存寻址涉及到内存的 段机制 和 页机制。
&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>计算机网络笔记-网络层</title>
      <link>http://cbsheng.github.io/posts/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E7%AC%94%E8%AE%B0-%E7%BD%91%E7%BB%9C%E5%B1%82/</link>
      <pubDate>Wed, 10 Dec 2014 00:00:00 +0000</pubDate>
      
      <guid>http://cbsheng.github.io/posts/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E7%AC%94%E8%AE%B0-%E7%BD%91%E7%BB%9C%E5%B1%82/</guid>
      <description>&lt;p&gt;因特网的网络层是提供了单一的服务，称为&lt;strong&gt;尽力而为服务&lt;/strong&gt;。网络层向上只提供简单灵活的、无连接的、尽最大努力交付的数据报服务。网络层不提供服务质量的承诺。&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>计算机网络笔记-运输层</title>
      <link>http://cbsheng.github.io/posts/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E7%AC%94%E8%AE%B0-%E8%BF%90%E8%BE%93%E5%B1%82/</link>
      <pubDate>Wed, 10 Dec 2014 00:00:00 +0000</pubDate>
      
      <guid>http://cbsheng.github.io/posts/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E7%AC%94%E8%AE%B0-%E8%BF%90%E8%BE%93%E5%B1%82/</guid>
      <description>&lt;p&gt;运输层是居于网络层之上，应用层之下。在运输层中，有着两个十分重要的因特网协议：&lt;strong&gt;TCP&lt;/strong&gt;和&lt;strong&gt;UDP&lt;/strong&gt;运输层协议。&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>现代操作系统-笔记</title>
      <link>http://cbsheng.github.io/posts/%E7%8E%B0%E4%BB%A3%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F-%E7%AC%94%E8%AE%B0/</link>
      <pubDate>Thu, 20 Nov 2014 00:00:00 +0000</pubDate>
      
      <guid>http://cbsheng.github.io/posts/%E7%8E%B0%E4%BB%A3%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F-%E7%AC%94%E8%AE%B0/</guid>
      <description>&lt;p&gt;本文整理了在学习操作系统储存管理过程中的一些知识点和思考。如有错漏，还望指正。&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
  </channel>
</rss>